module Main exposing (..)

import Args
import Bytes
import Dict
import Expect
import Init
import Node
import HttpClient
import Test.Runner.Effectful exposing (Test, run, describe, test, await, awaitError)
import Turso.Platform.Databases
import Json.Encode
import Turso.Platform.Tokens
import Process
import Crypto
import Task exposing ( Task )
import Json.Decode
import Turso.Db
import Turso.Db
import Turso.Db.Encode
import Turso.Db.Decode
import Tests.Turso.Platform.Groups
import Tests.Turso.Db
import Tests.Turso.Platform.Databases
import Tests.Turso.Platform.Tokens
import Tests.Turso.Platform


{-| The program that runs the tests
-}
main : Test.Runner.Effectful.Program a
main =
    Node.defineSimpleProgram <| \env ->
        Init.await HttpClient.initialize (\httpClientPermission ->
            let
                { args, options } =
                    Args.parse env.args
            in
            when { token = Dict.get "token" options, group = Dict.get "group" options, org = Dict.get "org" options } is
                { token = Just { values = [ token ] }, group = Just { values = [ group ] }, org = Just { values = [ org ] } } -> 
                    run env 
                        (Tests.Turso.Platform.tests
                            { httpPermission = httpClientPermission
                            , token = token
                            , group = group
                            , org = org
                            }
                        )
                    
                _ ->
                    -- If the parser fails, just run test that will fail
                    -- TODO: Replace with some proper error message
                    run env
                        (describe "No tests run" [])
        )
