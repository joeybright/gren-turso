{"Turso.Db":{"name":"Turso.Db","comment":" Module for configuring access to a specific Turso database and sending\nSQL to it.\n\n## Connecting to a Database\n\n@docs Connection\n\n## Run Statements\n\n@docs Statement\n\n@docs execute, transaction\n\n## Run Queries\n\n@docs Query\n\n@docs getAll, getOne, getMaybeOne\n\n## Getting Results\n\n@docs Result, Data\n","unions":[],"aliases":[{"name":"Connection","comment":" A `Connection` is required to make any requests to a Turso database.\n\n- `httpPermission` allows functions using this `Connection` can make HTTP requests.\n- `accessToken` is the token used to make requests to the specific database. A new \ntoken can be created using the `Turso.Platform.Databases.createToken` function, or \nbe retrieved from the Turso account dashboard. This token is specific to the database \nyou're attempting to access and is different than the token needed to access the \nTurso platform API.\n- `organizationSlug` is the slug of the organization the database you\nwant to query resides in.\n- `databaseUrl` is the name of the database you want to connect and send \nqueries to.\n- `locationUrl` is the location of the database, used to construct the correct\nURL. For example `aws-us-west-2` is a valid location.\n","args":[],"type":"{ httpPermission : HttpClient.Permission, accessToken : String.String, organizationSlug : String.String, databaseName : String.String, locationUrl : String.String }"},{"name":"Data","comment":" The data returned from a query or statement sent to the database.\n\n- `affectedRowCount` will return the amount of rows affected by the query or \nstatement. For example, if you run the `execute` function with a `DELETE` \nstatement, the returned `affectedRowcount` would indicate the number of rows \ndeleted.\n- `lastInsertedRowId` will return the id of the last inserted row. This id is\nthe Turso internal representation of the row that was inserted. This will be\n`Nothing` if no rows were inserted as part of the query.\n- `data` is the data that was decoded from the given query. If you are running \nstatements (using `execute` or `transaction`), no data will be returned.\n","args":["a"],"type":"{ affectedRowCount : Basics.Int, lastInsertRowId : Maybe.Maybe String.String, data : a }"},{"name":"Query","comment":" A query runs some SQL that expects some (one or more) result back.\n\nWhen inserting dynamic values into a query, it's highly recommended to use\nparameters instead of adding them manually to the query string.\n","args":["a"],"type":"{ query : String.String, parameters : Array.Array Turso.Db.Encode.Value, decoder : Turso.Db.Decode.Decoder a }"},{"name":"Result","comment":" The result of a single query sent to Turso.\n\n- `baton` is a value that is not used in this module. If supported in the future,\nit'd allow for multiple queries or statements to be run using the same database\nconnection.\n- `data` is the data result of running the query. These are captured by the\n`Data a` type in this module.\n","args":["a"],"type":"{ baton : Maybe.Maybe String.String, result : a }"},{"name":"Statement","comment":" A statement runs some SQL that does not expect any data back.\n\nWhen inserting dynamic values into a statement, it's highly recommended to use\nparameters instead of adding them manually to the statement string.\n","args":[],"type":"{ statement : String.String, parameters : Array.Array Turso.Db.Encode.Value }"}],"values":[{"name":"execute","comment":" Execute a single SQL statement.\n\n    Turso.Db.execute connection\n        { statement = \"INSERT INTO users (id, name) VALUES (:user_id, :user_name)\"\n        , parameters = \n            [ Turso.Db.Encode.int \"user_id\" 1\n            , Turso.Db.Encode.string \"user_name\" \"one\"\n            ]\n        }\n","type":"Turso.Db.Connection -> Turso.Db.Statement -> Task.Task (HttpClient.Error (Turso.Db.Result (Turso.Db.Data {}))) (HttpClient.Response (Turso.Db.Result (Turso.Db.Data {})))"},{"name":"getAll","comment":" Get all of the resulting rows from a `Query`.\n\n    Turso.Db.getMaybeOne\n        { query = \"SELECT * FROM users WHERE name = :user_name\"\n        , parameters = \n            [ Turso.Db.Encode.string \"user_name\" \"John\"\n            ]\n        , decoder = \n            Turso.Db.Decode.map2\n                (\\user_name user_id ->\n                    { name = user_name\n                    , id = user_id\n                    }\n                )\n                (Turso.Db.Decode.string \"name\")\n                (Turso.Db.Decode.string \"id\")\n        }\n","type":"Turso.Db.Connection -> Turso.Db.Query a -> Task.Task (HttpClient.Error (Turso.Db.Result (Turso.Db.Data (Array.Array a)))) (HttpClient.Response (Turso.Db.Result (Turso.Db.Data (Array.Array a))))"},{"name":"getMaybeOne","comment":" Run a query that should have zero or one results. If this query returns zero\nor more than one result, it will fail.\n\n    Turso.Db.getMaybeOne\n        { query = \"SELECT * FROM users WHERE name = :user_name AND id = :user_id\"\n        , parameters = \n            [ Turso.Db.Encode.string \"user_name\" \"Jane\"\n            , Turso.Db.Encode.string \"user_id\" \"300b989b-7549-4753-8495-49c613e83c88\"\n            ]\n        , decoder = \n            Turso.Db.Decode.map2\n                (\\user_name user_id ->\n                    { name = user_name\n                    , id = user_id\n                    }\n                )\n                (Turso.Db.Decode.string \"name\")\n                (Turso.Db.Decode.string \"id\")\n        }\n","type":"Turso.Db.Connection -> Turso.Db.Query a -> Task.Task (HttpClient.Error (Turso.Db.Result (Maybe.Maybe (Turso.Db.Data a)))) (HttpClient.Response (Turso.Db.Result (Maybe.Maybe (Turso.Db.Data a))))"},{"name":"getOne","comment":" Run a query that should return exactly one result. If this query returns zero\nor more than one result, it will fail.\n\n    Turso.Db.getAll\n        { query = \"SELECT * FROM users WHERE id = :id\"\n        , parameters = \n            [ Turso.Db.Encode.string \"id\" \"b185015c-a954-48e1-b92d-c9407ee554bd\"\n            ]\n        , decoder = \n            Turso.Db.Decode.map\n                (\\name ->\n                    { name = name\n                    }\n                )\n                (Turso.Db.Decode.string \"name\")\n        }\n","type":"Turso.Db.Connection -> Turso.Db.Query a -> Task.Task (HttpClient.Error (Turso.Db.Result (Turso.Db.Data a))) (HttpClient.Response (Turso.Db.Result (Turso.Db.Data a)))"},{"name":"transaction","comment":" Execute an `Array` of sql statements in a single request.\n\n    Turso.Db.transaction connection\n        [ { statement = \"INSERT INTO users (id, name) VALUES (:user_id, :user_name)\"\n          , parameters = \n            [ Turso.Db.Encode.int \"user_id\" 1\n            , Turso.Db.Encode.string \"user_name\" \"one\"\n            ]\n          }\n        , { statement = \"INSERT INTO users (id, name) VALUES (:user_id, :user_name)\"\n          , parameters =\n            [ Turso.Db.Encode.int \"user_id\" 2\n            , Turso.Db.Encode.string \"user_name\" \"two\"\n            ]\n          }\n        ]\n","type":"Turso.Db.Connection -> Array.Array Turso.Db.Statement -> Task.Task (HttpClient.Error (Turso.Db.Result (Array.Array (Turso.Db.Data {})))) (HttpClient.Response (Turso.Db.Result (Array.Array (Turso.Db.Data {}))))"}],"binops":[]},"Turso.Db.Decode":{"name":"Turso.Db.Decode","comment":" Decode results of SQL queries into Gren values.\n\nThese are typically used in the `Db.get*` functions via the `decoder` field,\nwhere the string value matches the name of the field in the query. For example:\n\n    Turso.Db.getOne connection\n        { query = \"SELECT * FROM users WHERE id = :id\"\n        , parameters = \n            [ Turso.Db.Encode.int 12345\n            ]\n        , decoder = \n            Db.Decode.map2\n                (\\id name -> \n                    { id = id\n                    , name = name \n                    }\n                )\n                (Db.Decode.int \"id\")\n                (Db.Decode.string \"name\")\n        }\n\n@docs Decoder\n\n## Decoding Fields\n\nUse these functions to decode individual fields in a row. You can combine multiple \nfields to construct Gren records (or other values) with the `mapN` functions.\n\n@docs string, int, float, bool, posix, maybe\n\n## Mapping\n\nTo combine multiple fields to construct Gren values like records, you can use \nthe the `mapN` functions.\n\n@docs map, map2, map3, map4, map5, map6, map7, map8\n\n## Fancy Decoding\n\nBuild more complex decoders with these functions.\n\n@docs succeed, fail, andThen\n\n## Internals\n\n@docs unwrap\n","unions":[{"name":"Decoder","comment":" A decoder for a database row.\n","args":["a"],"cases":[]}],"aliases":[],"values":[{"name":"andThen","comment":" Chain decoders together.\n\nThis is most often used this conjunction with [`succeed`](#succeed) and [`fail`](#fail).\nFor example:\n\n    Turso.Db.Decode.string \"email\"\n        |> Turso.Db.Decode.andThen\n            (\\email ->\n                when Email.fromString email is\n                    Just email -> \n                        Turso.Db.Decode.succeed email\n\n                    Nothing -> \n                        Turso.Db.Decode.fail \"invalid email\"\n            )\n\n","type":"(a -> Turso.Db.Decode.Decoder b) -> Turso.Db.Decode.Decoder a -> Turso.Db.Decode.Decoder b"},{"name":"bool","comment":" Decode a boolean field.\n\n    Turso.Db.Decode.bool \"is_active\"\n\nBooleans in SQLite can be stored as integers with 1 and 0 as True and False,\nor as a string with value \"TRUE\" or \"FALSE\". All other values will fail decoding.\nSee <https://www.sqlite.org/datatype3.html#boolean_datatype>\n","type":"String.String -> Turso.Db.Decode.Decoder Basics.Bool"},{"name":"fail","comment":" Force a decoder to fail.\n\nThis is most often used with [`andThen`](#andThen).\n","type":"String.String -> Turso.Db.Decode.Decoder a"},{"name":"float","comment":" Decode a float field.\n\n    Turso.Db.Decode.float \"cost\"\n","type":"String.String -> Turso.Db.Decode.Decoder Basics.Float"},{"name":"int","comment":" Decode an integer field.\n\n    Turso.Db.Decode.int \"count\"\n","type":"String.String -> Turso.Db.Decode.Decoder Basics.Int"},{"name":"map","comment":" Transform a single decoded value into another value. For example:\n\n    Turso.Db.Decode.string \"email\"\n        |> Turso.Db.Decode.map Email.fromString\n","type":"(a -> b) -> Turso.Db.Decode.Decoder a -> Turso.Db.Decode.Decoder b"},{"name":"map2","comment":" Transform two decoded values into another value. For example:\n\n    Turso.Db.Decode.map2\n        (\\email password ->\n            { email = email\n            , password = password\n            }\n        )\n        (Turso.Db.Decode.string \"email\")\n        (Turso.Db.Decode.string \"password\")\n","type":"(a -> b -> c) -> Turso.Db.Decode.Decoder a -> Turso.Db.Decode.Decoder b -> Turso.Db.Decode.Decoder c"},{"name":"map3","comment":" Transform three decoded values into another value.\n","type":"(a -> b -> c -> d) -> Turso.Db.Decode.Decoder a -> Turso.Db.Decode.Decoder b -> Turso.Db.Decode.Decoder c -> Turso.Db.Decode.Decoder d"},{"name":"map4","comment":" Transform four decoded values into another value.\n","type":"(a -> b -> c -> d -> e) -> Turso.Db.Decode.Decoder a -> Turso.Db.Decode.Decoder b -> Turso.Db.Decode.Decoder c -> Turso.Db.Decode.Decoder d -> Turso.Db.Decode.Decoder e"},{"name":"map5","comment":" Transform five decoded values into another value.\n","type":"(a -> b -> c -> d -> e -> f) -> Turso.Db.Decode.Decoder a -> Turso.Db.Decode.Decoder b -> Turso.Db.Decode.Decoder c -> Turso.Db.Decode.Decoder d -> Turso.Db.Decode.Decoder e -> Turso.Db.Decode.Decoder f"},{"name":"map6","comment":" Transform six decoded values into another value.\n","type":"(a -> b -> c -> d -> e -> f -> g) -> Turso.Db.Decode.Decoder a -> Turso.Db.Decode.Decoder b -> Turso.Db.Decode.Decoder c -> Turso.Db.Decode.Decoder d -> Turso.Db.Decode.Decoder e -> Turso.Db.Decode.Decoder f -> Turso.Db.Decode.Decoder g"},{"name":"map7","comment":" Transform seven decoded values into another value.\n","type":"(a -> b -> c -> d -> e -> f -> g -> h) -> Turso.Db.Decode.Decoder a -> Turso.Db.Decode.Decoder b -> Turso.Db.Decode.Decoder c -> Turso.Db.Decode.Decoder d -> Turso.Db.Decode.Decoder e -> Turso.Db.Decode.Decoder f -> Turso.Db.Decode.Decoder g -> Turso.Db.Decode.Decoder h"},{"name":"map8","comment":" Transform eight decoded values into another value.\n\nIf you need more than 8, you can tack on more with [`andThen`](#andThen).\n","type":"(a -> b -> c -> d -> e -> f -> g -> h -> i) -> Turso.Db.Decode.Decoder a -> Turso.Db.Decode.Decoder b -> Turso.Db.Decode.Decoder c -> Turso.Db.Decode.Decoder d -> Turso.Db.Decode.Decoder e -> Turso.Db.Decode.Decoder f -> Turso.Db.Decode.Decoder g -> Turso.Db.Decode.Decoder h -> Turso.Db.Decode.Decoder i"},{"name":"maybe","comment":" Decode a nullable field in the database.\n\nThe first parameter is the decoder function for the field type if the value is not null.\nFor example, to decode a nullable INTEGER field:\n\n    Turso.Db.Decode.maybe Turso.Db.Decode.int \"myField\"\n","type":"(String.String -> Turso.Db.Decode.Decoder a) -> String.String -> Turso.Db.Decode.Decoder (Maybe.Maybe a)"},{"name":"posix","comment":" Decode an integer field into a Time.Posix value.\n\n    Turso.Db.Decode.posixe \"created_at\"\n\nThe integer in the database should represent unix time in milliseconds\n(the number of milliseconds since 1970 January 1 at 00:00:00 UTC).\nThis is how a `Time.Posix` value will be saved when using \n[Turso.Db.Encode.posix](Turso.Db.Encode#posix).\n","type":"String.String -> Turso.Db.Decode.Decoder Time.Posix"},{"name":"string","comment":" Decode a string field.\n\n    Turso.Db.Decode.string \"name\"\n","type":"String.String -> Turso.Db.Decode.Decoder String.String"},{"name":"succeed","comment":" Create a decoder that's hard-coded to a specific value.\n\nFor example:\n\n    Turso.Db.Decode.succeed \"abc\"\n\nWill always decode to \"abc\" regardless of input.\n\nThis is most often used with [`andThen`](#andThen).\n","type":"a -> Turso.Db.Decode.Decoder a"},{"name":"unwrap","comment":" Unwrap a `Decoder` and turns it into a normal `Json.Decode.Decoder`\n\nThis is used by other modules in this package and not needed to properly \ndecode data returned from queries.\n","type":"Turso.Db.Decode.Decoder a -> Json.Decode.Decoder a"}],"binops":[]},"Turso.Db.Encode":{"name":"Turso.Db.Encode","comment":" Encode SQL parameters.\n\nEncoded parameters are passed in an array via the `parameters` field,\nwhere the string matches the colon-prefixed named of the parameter in the sql:\n\n    Turso.Db.execute connection\n        { statement = \"INSERT INTO users (id, name) VALUES (:id, :name)\"\n        , parameters =\n            [ Turso.Db.Encode.int \"id\" 1\n            , Turso.Db.Encode.string \"name\" \"Justin\"\n            ]\n        }\n\nQueries and statements where encoded parameters are used can be found in the\n`Turso.Db` module.\n\n@docs Value\n\n## Encode Values\n\n@docs  string, int, float, bool, null, posix\n\n## Internals\n\n@docs unwrap\n\n","unions":[{"name":"Value","comment":" An encoded parameter value.\n","args":[],"cases":[]}],"aliases":[],"values":[{"name":"bool","comment":" Encode a boolean value.\n\n    Db.Encode.bool \"is_admin\" True\n","type":"String.String -> Basics.Bool -> Turso.Db.Encode.Value"},{"name":"float","comment":" Encode a float.\n\n    Db.Encode.float \"pi\" 3.14159265359\n","type":"String.String -> Basics.Float -> Turso.Db.Encode.Value"},{"name":"int","comment":" Encode an integer.\n\n    Db.Encode.int \"count\" 100\n","type":"String.String -> Basics.Int -> Turso.Db.Encode.Value"},{"name":"null","comment":" Encode null.\n\n    Db.Encode.null \"nothing\"\n","type":"String.String -> Turso.Db.Encode.Value"},{"name":"posix","comment":" Encode a Time.Posix value.\n\nThis is what you should use for date fields. The database field should be an INTEGER type.\nIt will be stored as the number of milliseconds since 1970 January 1 at 00:00:00 UTC (it was a Thursday).\n\n    Db.Encode.posix \"created_at\" (Time.millisToPosix 0)\n","type":"String.String -> Time.Posix -> Turso.Db.Encode.Value"},{"name":"string","comment":" Encode a String value.\n\n    Db.Encode.string \"name\" \"Jessica Therme\"\n","type":"String.String -> String.String -> Turso.Db.Encode.Value"},{"name":"unwrap","comment":" Unwrap the `Value` type and turn it a record.\n\nThis is used by other modules in this package and not needed to properly \nencode parameters for queries.\n","type":"Turso.Db.Encode.Value -> { key : String.String, value : Json.Encode.Value, type_ : String.String }"}],"binops":[]},"Turso.Platform":{"name":"Turso.Platform","comment":" Configure access to the Turso Platform API.\n\n@docs Connection\n","unions":[],"aliases":[{"name":"Connection","comment":" A connection to the Turso Platform API for a specific organization.\n\n- `httpPermission` allows functions using this `Connection` can make \nHTTP requests.\n- `accessToken` value is the Turso API token used to make requests to\nthe organization name specified with the `organizationSlug` value.\n- `organiztionSlug` is the name (or slug) of your organization in Turso.\n","args":[],"type":"{ httpPermission : HttpClient.Permission, accessToken : String.String, organizationSlug : String.String }"}],"values":[],"binops":[]},"Turso.Platform.Databases":{"name":"Turso.Platform.Databases","comment":" Interact with databases in Turso.\n\n@docs Database\n\n## List Databases\n\n@docs ListArgs, ListError, list\n\n## Get a Single Database\n\n@docs RetrieveArgs, RetrieveError, retrieve\n\n## Create Databases\n\n@docs CreateArgs, CreateResult, CreateError, create\n\n## Delete Databases\n\n@docs DeleteArgs, DeleteResult, DeleteError, delete\n\n## Create Database Tokens\n\nCreate tokens for a specific database in Turso. These tokens can be used\nto query databases with the `Turso.Db` module.\n\n@docs CreateTokenArgs, TokenAuthorization, CreateTokenResult, createToken\n\n## Invalidate Database Tokens\n\n@docs InvalidateTokensArgs, InvalidateTokensError, invalidateTokens\n\n## Get Database Usage\n\n@docs UsageArgs, UsageStats, UsageResult, UsageError, usage\n\n## Get Database Stats\n\n@docs StatsArgs, StatsResult, StatsError, stats\n\n","unions":[{"name":"CreateError","comment":" Errors that can happen when attempting to create a database.\n\n- `CreateErrorDatabaseAlreadyExists` happens when you're trying to create a \ndatabase whose name already existing in Turso for the group you're making \nthe database in.\n- `CreateErrorGroupNotFound` happens when the group you're trying to create the\ndatabase for does not exist in the organization.\n- `CreateHttpError` captures any other HTTP errors.\n","args":[],"cases":[["CreateErrorDatabaseAlreadyExists",[]],["CreateErrorGroupNotFound",[]],["CreateHttpError",["HttpClient.Error Turso.Platform.Databases.CreateResult"]]]},{"name":"DeleteError","comment":" Errors that can happen when attempting to delete a database.\n\n- `DeleteErrorDatabaseNotFound` happens when the passed database name does\nnot exist yet in Turso.\n- `DeleteHttpError` captures any other HTTP errors.\n","args":[],"cases":[["DeleteErrorDatabaseNotFound",[]],["DeleteHttpError",["HttpClient.Error Turso.Platform.Databases.DeleteResult"]]]},{"name":"InvalidateTokensError","comment":" Errors that can happen when attempting to invalidate a databases tokens.\n\n- `InvalidateTokensErrorDatabaseNotFound` happens when the passed database name does\nnot exist yet in Turso.\n- `InvalidateTokensHttpError` captures any other HTTP errors.\n","args":[],"cases":[["InvalidateTokensErrorDatabaseNotFound",[]],["InvalidateTokensHttpError",["HttpClient.Error {}"]]]},{"name":"ListError","comment":" Errors that can happen when attempting to list databases.\n\n- `ListErrorGroupNotFound` happens when, if a group name is provided, that group \ndoes not exist.\n- `ListHttpError` captures any other HTTP errors.\n","args":[],"cases":[["ListErrorGroupNotFound",[]],["ListHttpError",["HttpClient.Error (Array.Array Turso.Platform.Databases.Database)"]]]},{"name":"RetrieveError","comment":" Errors that can happen when attempting to retrieve a database.\n\n- `RetrieveErrorDatabaseNotFound` happens when the passed database name does\nnot exist in Turso.\n- `RetrieveHttpError` captures any other HTTP errors.\n","args":[],"cases":[["RetrieveErrorDatabaseNotFound",[]],["RetrieveHttpError",["HttpClient.Error Turso.Platform.Databases.Database"]]]},{"name":"StatsError","comment":" Errors that can happen when attempting to retrieve stats for a database.\n\n- `StatsErrorDatabaseNotFound` happens when the passed database name \ndoes not exist in Turso.\n- `StatsHttpError` captures any other HTTP errors.\n","args":[],"cases":[["StatsErrorDatabaseNotFound",[]],["StatsHttpError",["HttpClient.Error Turso.Platform.Databases.StatsResult"]]]},{"name":"TokenAuthorization","comment":" Represents the type of access a token is allowed to have for the\ndatabase.\n\n- `FullAccess` allows reading and writing data to the database.\n- `ReadOnly` only allows queries to read data from the database.\n","args":[],"cases":[["FullAccess",[]],["ReadOnly",[]]]},{"name":"UsageError","comment":" Errors that can happen when attempting to retrieve usage \ninformation for a database.\n\n- `UsageErrorInvalidQueryParameter` happens when the passed `from` or \n`to` values are not valid ISO 8601 strings.\n- `UsageErrorDatabaseNotFound` happens when the passed database name \ndoes not exist yet in Turso.\n- `RetrieveHttpError` captures any other HTTP errors.\n","args":[],"cases":[["UsageErrorInvalidQueryParameter",[]],["UsageErrorDatabaseNotFound",[]],["UsageHttpError",["HttpClient.Error Turso.Platform.Databases.UsageResult"]]]}],"aliases":[{"name":"CreateArgs","comment":" Arguments needed to create a database. \n\n- `group` is the group the created database will be a part of. This group must \nalready be created or else the request will fail. \n- `databaseName` is the name of the newly created database. The request will \nfail if there is already a database of the specified name created.\n","args":[],"type":"{ databaseName : String.String, group : String.String }"},{"name":"CreateResult","comment":" Results of successfully creating a database with the Turso API.\n\n- `databaseId` is the newly created databases id in Turso.\n- `databaseName` is the name of the newly created database. This will match\nthe name given to the `create` function.\n- `hostname` is a value that can be used to make specific requests to that\ndatabase using the `Turso.Db` module in this package.\n","args":[],"type":"{ databaseId : String.String, databaseName : String.String, hostname : String.String }"},{"name":"CreateTokenArgs","comment":" Arguments needed to create a database token. \n\n- `databaseName` is the name of the database you want to create the\ntoken for.\n- `expiration` field is a string representing when the token expires.\nThis must resemble the following format: `2w1d30m`. If not provided,\nthe token will never expire.\n- `authorization` value specifies what type of actions the token will\nbe able to take on the database. The default value is `FullAccess`. See\nthe `TokenAuthorization` type for more options.\n- `permissions` record has one field: `readAttachDatabases`. Providing\nan array of database ids which this token is allowed to attach to a SQL\nstatement with the `ATTACH` keyword. If not required, an empty array\n(`[]`) can be provided as the value.\n","args":[],"type":"{ databaseName : String.String, expiration : Maybe.Maybe String.String, authorization : Maybe.Maybe Turso.Platform.Databases.TokenAuthorization, permissions : { readAttachDatabases : Array.Array String.String } }"},{"name":"CreateTokenResult","comment":" Results of successfully creating token for a database.\n\n- `jwt` is a `String` representing the created JWT (JavaScipt Web Token).\n","args":[],"type":"{ jwt : String.String }"},{"name":"Database","comment":" A database in Turso. Many functions in this module return a `Database`.\n","args":[],"type":"{ name : String.String, databaseId : String.String, hostname : String.String, blockReads : Basics.Bool, blockWrites : Basics.Bool, regions : Array.Array String.String, primaryRegion : String.String, group : String.String, deleteProtection : Basics.Bool, parent : Maybe.Maybe { id : String.String, name : String.String, branchedAt : String.String } }"},{"name":"DeleteArgs","comment":" Arguments for the `delete` function.\n\n- `databaseName` is the name of the database you want to delete.\n","args":[],"type":"{ databaseName : String.String }"},{"name":"DeleteResult","comment":" Results of successfully deleting a database.\n\n- `databaseName` is the name of the deleted database. This should match\nthe name given in the `delete` function.\n","args":[],"type":"{ databaseName : String.String }"},{"name":"InvalidateTokensArgs","comment":" Arguments needed to invalidate all tokens for a database.\n\n- `databaseName` is the database you want to invalid the tokens for.\n","args":[],"type":"{ databaseName : String.String }"},{"name":"ListArgs","comment":" Arguments for the `list` function.\n\nBoth `group` and `parent` are optional. Not providing them will list all databases\nfor the given organization specified in `Turso.Platform.Connection` If provided,\nthey do the following:\n\n- `group` will filter the resulting list based on the group name provided.\n- `parent` will filter the resulting list to databases whose parent database matches\nthe id of the passed parent database.\n","args":[],"type":"{ groupName : Maybe.Maybe String.String, parentDbId : Maybe.Maybe String.String }"},{"name":"RetrieveArgs","comment":" Arguments for the `retrieve` function.\n\n- `databaseName` is the name of the database you want to retrieve.\n","args":[],"type":"{ databaseName : String.String }"},{"name":"StatsArgs","comment":" Arguments for the `stats` function.\n\n- `databaseName` is the name of the database you want to get stats for.\n","args":[],"type":"{ databaseName : String.String }"},{"name":"StatsResult","comment":" The results of getting stats for a database.\n\n- `topQueries` is an array of the queries who have done the most reading\nand writing of rows for the database.\n","args":[],"type":"{ topQueries : Array.Array { query : String.String, rowsRead : Basics.Int, rowsWritten : Basics.Int } }"},{"name":"UsageArgs","comment":" Arguments for the `usage` function.\n\n- `databaseName` is the name of the database you want to get usage\ninformation for\n- `from` is the first date you want to get usage for.\n- `to` is the last date you want to get usage for.\n\nBoth `from` and `to` must be ISO 8601 strings.\n","args":[],"type":"{ databaseName : String.String, from : Maybe.Maybe String.String, to : Maybe.Maybe String.String }"},{"name":"UsageResult","comment":" The results of getting usage information for a database.\n\n- `databaseId` is the id of the database you're getting usage for\n- `totaUsage` is sum of all of the `UsageStats` from all instances\nof the given database.\n- `instances` is the usage for each specific instance of the database.\n","args":[],"type":"{ databaseId : String.String, totalUsage : Turso.Platform.Databases.UsageStats, instances : Array.Array { databaseInstanceId : String.String, usage : Turso.Platform.Databases.UsageStats } }"},{"name":"UsageStats","comment":" The specific stats for an individual database.\n","args":[],"type":"{ rowsRead : Basics.Int, rowsWritten : Basics.Int, storageBytes : Basics.Int, bytesSynced : Basics.Int }"}],"values":[{"name":"create","comment":" Create a new Turso database.\n","type":"Turso.Platform.Connection -> Turso.Platform.Databases.CreateArgs -> Task.Task Turso.Platform.Databases.CreateError (HttpClient.Response Turso.Platform.Databases.CreateResult)"},{"name":"createToken","comment":" Create a token for operating on a database in Turso.\n","type":"Turso.Platform.Connection -> Turso.Platform.Databases.CreateTokenArgs -> Task.Task (HttpClient.Error Turso.Platform.Databases.CreateTokenResult) (HttpClient.Response Turso.Platform.Databases.CreateTokenResult)"},{"name":"delete","comment":" Delete a database in Turso.\n","type":"Turso.Platform.Connection -> Turso.Platform.Databases.DeleteArgs -> Task.Task Turso.Platform.Databases.DeleteError (HttpClient.Response Turso.Platform.Databases.DeleteResult)"},{"name":"invalidateTokens","comment":" Invalidate all tokens for the given database name.\n\nWhen successfull, will invalidate all tokens for the given database, but returns no values.\n","type":"Turso.Platform.Connection -> Turso.Platform.Databases.InvalidateTokensArgs -> Task.Task Turso.Platform.Databases.InvalidateTokensError (HttpClient.Response {})"},{"name":"list","comment":" List databases in your Turso organization.\n\nWhen successfully, returns an `Array Database` of the retrieved databases.\n","type":"Turso.Platform.Connection -> Turso.Platform.Databases.ListArgs -> Task.Task Turso.Platform.Databases.ListError (HttpClient.Response (Array.Array Turso.Platform.Databases.Database))"},{"name":"retrieve","comment":" Retrieve a specific database by name.\n\nWhen successful, returns a single `Database` record.\n","type":"Turso.Platform.Connection -> Turso.Platform.Databases.RetrieveArgs -> Task.Task Turso.Platform.Databases.RetrieveError (HttpClient.Response Turso.Platform.Databases.Database)"},{"name":"stats","comment":" Get stats for a given database.\n","type":"Turso.Platform.Connection -> Turso.Platform.Databases.StatsArgs -> Task.Task Turso.Platform.Databases.StatsError (HttpClient.Response Turso.Platform.Databases.StatsResult)"},{"name":"usage","comment":" Get the usage information for a given database.\n","type":"Turso.Platform.Connection -> Turso.Platform.Databases.UsageArgs -> Task.Task Turso.Platform.Databases.UsageError (HttpClient.Response Turso.Platform.Databases.UsageResult)"}],"binops":[]},"Turso.Platform.Groups":{"name":"Turso.Platform.Groups","comment":" Manage groups in Turso.\n\nThis module is incomplete and only supports a subsset of groups \nfunctionality in the Turso Platform API.\n\n@docs Group\n\n## List Groups\n\n@docs list\n\n## Get a Single Group\n\n@docs RetrieveArgs, RetrieveError, retrieve\n\n## Get Group Configuration\n\n@docs RetrieveConfigurationArgs, RetrieveConfigurationResult, RetrieveConfigurationError, retrieveConfiguration\n","unions":[{"name":"RetrieveConfigurationError","comment":" Errors that can happen when attempting to get a group.\n\n- `RetrieveConfigurationErrorGroupNotFound` happens when the given `groupName` does not exist.\n- `RetrieveConfigurationHttpError` captures any other HTTP errors.\n","args":[],"cases":[["RetrieveConfigurationErrorGroupNotFound",[]],["RetrieveConfigurationHttpError",["HttpClient.Error Turso.Platform.Groups.RetrieveConfigurationResult"]]]},{"name":"RetrieveError","comment":" Errors that can happen when attempting to get a group.\n\n- `RetrieveErrorGroupNotFound` happens when the given `groupName` does not exist.\n- `RetrieveHttpError` captures any other HTTP errors.\n","args":[],"cases":[["RetrieveErrorGroupNotFound",[]],["RetrieveHttpError",["HttpClient.Error Turso.Platform.Groups.Group"]]]}],"aliases":[{"name":"Group","comment":" A group in Turso. Many functions in this module return a `Group`.\n","args":[],"type":"{ name : String.String, version : String.String, groupId : String.String, locations : Array.Array String.String, primaryLocation : String.String, deleteProtection : Basics.Bool }"},{"name":"RetrieveArgs","comment":" Arguments for the `retrieve` function.\n\n- `groupName` is the group you're attempting to retrieve from Turso.\n","args":[],"type":"{ groupName : String.String }"},{"name":"RetrieveConfigurationArgs","comment":" Arguments for the `retrieve` function.\n\n- `groupName` is the group you're attempting to retrieve the configuration info of.\n","args":[],"type":"{ groupName : String.String }"},{"name":"RetrieveConfigurationResult","comment":" Result of successfully getting a groups configuration.\n\n- `deleteProtection` specifies if the group cannot be deleted.\n","args":[],"type":"{ deleteProtection : Basics.Bool }"}],"values":[{"name":"list","comment":" List all groups in Turso for the organization specified in the \n`Turso.Db.Connection`.\n","type":"Turso.Platform.Connection -> Task.Task (HttpClient.Error (Array.Array Turso.Platform.Groups.Group)) (HttpClient.Response (Array.Array Turso.Platform.Groups.Group))"},{"name":"retrieve","comment":" Get a single group in Turso.\n","type":"Turso.Platform.Connection -> Turso.Platform.Groups.RetrieveArgs -> Task.Task Turso.Platform.Groups.RetrieveError (HttpClient.Response Turso.Platform.Groups.Group)"},{"name":"retrieveConfiguration","comment":" Retrieve the configuration for a group in Turso.\n","type":"Turso.Platform.Connection -> Turso.Platform.Groups.RetrieveConfigurationArgs -> Task.Task Turso.Platform.Groups.RetrieveConfigurationError (HttpClient.Response Turso.Platform.Groups.RetrieveConfigurationResult)"}],"binops":[]},"Turso.Platform.Tokens":{"name":"Turso.Platform.Tokens","comment":" Manage tokens in Turso.\n\nThis module does not use a `Turso.Platform.Connection`. The functions here are\nfor manipulating tokens for a user, who is identified with the access token\npassed to each of these functions.\n\n## List Tokens\n\n@docs ListArgs, ListResult, list\n\n## Create Tokens\n\n@docs CreateArgs, CreateResult, create\n\n## Validate Tokens\n\n@docs ValidateArgs, ValidateResult, validate\n\n## Revoke tokens\n\n@docs RevokeArgs, RevokeResult, revoke\n","unions":[],"aliases":[{"name":"CreateArgs","comment":" Arguments needed for the `create` function.\n\n- `permission` is the `HttpClient.Permission` required to make an HTTP request.\n- `token` is the token used to identify the user who you want to create a new\ntoken for.\n- `createdTokenName` is the name you want to give to the created token.\n","args":[],"type":"{ permission : HttpClient.Permission, token : String.String, createdTokenName : String.String }"},{"name":"CreateResult","comment":" The result of creating a new Turso platform API token.\n\n- `name` is the name of the created token.\n- `id` is the unique id for the created token.\n- `token` is the token itself. This should not be saved unsafely or shared \npublicly!\n","args":[],"type":"{ name : String.String, id : String.String, token : String.String }"},{"name":"ListArgs","comment":" Arguments needed for the `list` function.\n\n- `permission` is the `HttpClient.Permission` required to make an HTTP request.\n- `token` is the token used to identify the user whose tokens you want to list.\n","args":[],"type":"{ permission : HttpClient.Permission, token : String.String }"},{"name":"ListResult","comment":" The result of listing all tokens.\n\n- `tokens` are all of the tokens for the user. This only specifies the token \n`name` and `id` and does not reveal the token itself.\n","args":[],"type":"{ tokens : Array.Array { name : String.String, id : String.String } }"},{"name":"RevokeArgs","comment":" Arguments needed for the `revoke` function.\n\n- `permission` is the `HttpClient.Permission` required to make an HTTP request.\n- `token` is the token used to identify the user whose token you want to revoke.\n- `tokenNameToRevoke` is the name of the token you want to revoke.\n","args":[],"type":"{ permission : HttpClient.Permission, token : String.String, tokenNameToRevoke : String.String }"},{"name":"RevokeResult","comment":" The result of revoking a token.\n\n- `tokenName` is the name of the revoked token. This should match the name given \nto the `revoke` function.\n","args":[],"type":"{ tokenName : String.String }"},{"name":"ValidateArgs","comment":" Arguments needed for the `validate` function.\n\n- `permission` is the `HttpClient.Permission` required to make an HTTP request.\n- `token` is the token you want to validate. This must be the actual token and \nnot the token name or id.\n","args":[],"type":"{ permission : HttpClient.Permission, token : String.String }"},{"name":"ValidateResult","comment":" The result of validating an API token.\n\n- `exp` is the expiration time (in unix epoch time) that the token expires.\n","args":[],"type":"{ exp : Basics.Int }"}],"values":[{"name":"create","comment":" Create a new Turso platform API token. \n\nThe resulting token should not be saved unsafely or shared publicly.\n","type":"Turso.Platform.Tokens.CreateArgs -> Task.Task (HttpClient.Error Turso.Platform.Tokens.CreateResult) (HttpClient.Response Turso.Platform.Tokens.CreateResult)"},{"name":"list","comment":" List all Turso platform API tokens belonging to the user.\n","type":"Turso.Platform.Tokens.ListArgs -> Task.Task (HttpClient.Error Turso.Platform.Tokens.ListResult) (HttpClient.Response Turso.Platform.Tokens.ListResult)"},{"name":"revoke","comment":" Revoke a token.\n","type":"Turso.Platform.Tokens.RevokeArgs -> Task.Task (HttpClient.Error Turso.Platform.Tokens.RevokeResult) (HttpClient.Response Turso.Platform.Tokens.RevokeResult)"},{"name":"validate","comment":" Validate an API token beloning to a user.\n","type":"Turso.Platform.Tokens.ValidateArgs -> Task.Task (HttpClient.Error Turso.Platform.Tokens.ValidateResult) (HttpClient.Response Turso.Platform.Tokens.ValidateResult)"}],"binops":[]}}